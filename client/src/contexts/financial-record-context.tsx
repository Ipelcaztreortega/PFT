import { createContext, useContext, useEffect, useState } from "react";
import {useUser} from '@clerk/clerk-react'

// Define the structure of a financial record
export interface FinancialRecord {
    _id?: string; // Optional ID, as it's generated by the server
    userId: string; // ID of the user who owns the record
    date: Date; // Date of the financial record
    description: string; // Description of the transaction
    amount: number; // Amount of money involved
    category: string; // Category of the transaction
    paymentMethod: string; // Payment method used for the transaction
}


// Define the shape of the context
interface FinancialRecordsContextType {
    records: FinancialRecord[]; // Array of financial records
    addRecord: (record: FinancialRecord) => void; // Function to add a new financial record
    updateRecord: (id: string, newRecord: FinancialRecord) => void; // Function to update an existing financial record
    deleteRecord: (id: string) => void; // Function to delete a financial record
}


// Create a context for managing financial records
export const FinancialRecordsContext = createContext<FinancialRecordsContextType | undefined>(
    undefined
);

export const FinancialRecordsProvider = ({
    children,
} : {children: React.ReactNode;
}) => {
    const [records, setRecords] = useState<FinancialRecord[]>([]);
    const {user} = useUser();

    const fetchRecords = async () => {
        if (!user) return;
        const response = await fetch(
            `http://localhost:3001/financial-records/getAllByUserID/${user.id}`
        );
        if (response.ok) {
            const records = await response.json();
            console.log(records);
            setRecords(records);
        }
    };

    useEffect(() => {
        fetchRecords();
    }, [user]);

    const addRecord = async (record: FinancialRecord) => {
        const response = await fetch("http://localhost:3001/financial-records", {
            method: "POST", 
            body: JSON.stringify(record),
            headers: {
                'Content-Type': "application/json"
            }
        });
        try {
            if (response.ok) {
                const newRecord = await response.json()
                setRecords((prev)=>[...prev, newRecord]);
            }
        } catch (err){

        }
        
    };

    const updateRecord = async (id: string, newRecord: FinancialRecord) => {
        // if (!user) return;
        const response = await fetch(
            `http://localhost:3001/financial-records/${id}`, 
            {
                method: "PUT", 
                body: JSON.stringify(newRecord),
                headers: {
                    'Content-Type': "application/json"
            }
        });
        try {
            if (response.ok) {
                const newRecord = await response.json();
                setRecords((prev) => 
                prev.map((record) => {
                    if (record._id === id) {
                        return newRecord;
                    } else {
                        return record;
                    }
                })
                );
            }
        } catch (err){

        }
        
    };

    const deleteRecord = async (id: string) => {
        const response = await fetch(
            `http://localhost:3001/financial-records/${id}`, 
            {
                method: "DELETE", 
            }
        );
        try {
            if (response.ok) {
                const deletedRecord = await response.json()
                setRecords((prev) => 
                prev.filter((record) => record._id !== deletedRecord._id));
            }
        } catch (err){

        }
    }
    return (<FinancialRecordsContext.Provider 
        value={{records, addRecord, updateRecord, deleteRecord}} >
        {" "}
        {children}
    </FinancialRecordsContext.Provider>
    );
};

export const useFinancialRecords = () => {
    const context = useContext<FinancialRecordsContextType | undefined>(
        FinancialRecordsContext
    )
    if (!context) {
        throw new Error("useFinancialRecords must be used within a FinancialRecordsProvider")
    }
    return context;
};